{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/ExchangeHeader.jsx","components/AccountBalance/AccountBalance.jsx","App.js","serviceWorker.js","index.js"],"names":["Td","styled","td","TdControls","TdName","Button","button","Coin","props","name","ticker","parseFloat","Number","price","toFixed","showBalance","balance","action","method","className","onClick","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","Header","header","H1","h1","ExchangeHeader","Component","Section","section","Balance","div","BalanceToggleButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","buttonText","content","format","amount","buttonClass","handleBalanceVisibiltyChange","handleBrrrr","Div","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","useEffect","length","valueChangeId","tickerUrl","newPrice","USD","newCoinData","values","newValues","oldBalance","oldValue","isBuy","balanceChange","handleRefreh","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2342419.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst Td = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 14vw;\r\n`;\r\nconst TdControls = styled(Td)`\r\n    width: 14vw;\r\n`;\r\nconst TdName = styled(Td)`\r\n    width: 20vw;\r\n`;\r\nconst Button = styled.button`\r\n    font-size: 11px;\r\n    width: 64px;\r\n    margin: 3px 5px 0;\r\n`;\r\n\r\nexport default function Coin(props) {\r\n    \r\n    const  handleRefresh = (event) => {\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerId);\r\n    }\r\n    const  handleBuy = (event) => {\r\n        event.preventDefault();\r\n        props.handleTransaction(true, props.tickerId);\r\n    }\r\n    const  handleSell = (event) => {\r\n        event.preventDefault();\r\n        props.handleTransaction(false, props.tickerId);\r\n    }\r\n\r\nreturn (\r\n    <tr>\r\n        <TdName>{props.name}</TdName>\r\n        <Td>{props.ticker}</Td>\r\n        <Td>${parseFloat(Number(props.price.toFixed(4)))}</Td>\r\n        <Td>{props.showBalance ? props.balance : '-' } </Td>\r\n        <TdControls>\r\n            <form action=\"#\" method=\"POST\">\r\n                <Button className=\"btn btn-info\" onClick={handleRefresh}>Refresh Price</Button>\r\n                <Button className=\"btn btn-warning\" onClick={handleBuy}>Buy</Button>\r\n                <Button className=\"btn btn-danger\" onClick={handleSell}>Sell</Button>\r\n            </form>\r\n        </TdControls>\r\n    </tr>\r\n);\r\n    }\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired, \r\n    ticker: PropTypes.string,\r\n    price: PropTypes.number\r\n\r\n}","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n    font-size: 1rem;\r\n`;\r\n\r\n//          {props.showBalance ?<th>Balance</th> : null} \r\n\r\nexport default function CoinList(props) {\r\n  return(  \r\n    <Table className=\"table table-primary table-bordered\"> \r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          <th>Price</th>\r\n          <th>Balance</th> \r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.coinData.map( ({key, name, ticker, price, balance}) => \r\n          <Coin key={key}\r\n                handleRefresh={props.handleRefresh}\r\n                handleTransaction={props.handleTransaction}\r\n                name = {name}\r\n                ticker={ticker}\r\n                price={price} \r\n                showBalance={props.showBalance}\r\n                balance={balance} \r\n                tickerId={key}/>\r\n            )\r\n        }\r\n      \r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Header = styled.header`\r\n    background-color: #282c34;\r\n    min-height: 10vh;\r\n    width: 100%\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    color: rgb(255, 255, 255);\r\n`;\r\n  \r\nconst H1 = styled.h1`\r\n    font-size: 3rem;\r\n    line-heigth: 8rem;\r\n    font-weight: bold;\r\n    min-width: 300px;\r\n    `;\r\n  \r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n          <Header>  \r\n            <div>\r\n            <H1>\r\n              Coin Exchange.\r\n            </H1>\r\n          </div>\r\n          </Header>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin: 0 auto 2rem auto;    \r\n    margion-buttom: 2rem;\r\n    line heighth: 3rem;\r\n`;\r\n\r\nconst Balance = styled.div`\r\n    min-width: 250px;\r\n    margin: 0.5rem 0 0 2.5rem;\r\n    font-size: 1.5em;\r\n    text-align: left;\r\n    vertical-align: middle;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    margin: 0 8px;\r\n`;\r\n\r\nconst BalanceToggleButton = styled(Button)`\r\n    width: 150px;\r\n    vertical-align: middle;\r\n`;\r\n\r\nvar formatter = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\n\r\nexport default function AccountBalance(props) {\r\n\r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    let content = '\\u00A0';\r\n    if (props.showBalance){\r\n        content = <>{formatter.format(props.amount)}</>\r\n    }\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\r\n    return (\r\n       <>\r\n        <Balance>{content}</Balance>\r\n        <Section>\r\n            <BalanceToggleButton \r\n                onClick={props.handleBalanceVisibiltyChange}\r\n                className={buttonClass}>\r\n                {buttonText}\r\n            </BalanceToggleButton>\r\n            <Button className = \"btn btn-success\"\r\n                onClick={props.handleBrrrr}>\r\n                <i className=\"fas fa-hand-holding-usd\"></i>\r\n            </Button>\r\n        </Section>\r\n      </>\r\n    )\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.string.isRequired\r\n\r\n}","import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components'\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport axios from 'axios';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all';\n\n// git add .\n// git commit -m \"cleaning up\"\n// git remote add origin https://github.com/rfkinline/coin-exchange.git\n// git push -u origin master\n// npm start\n\n// Create new project: $ npx create-react-app coin-invest\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: #553d74;\n  color: #cccccc;\n  `;\n\nconst COIN_COUNT = 10;\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\nconst componentDidMount = async () => {\n  // Needed to retrieve coins sorted by rank and then retrieve price\n  const response = await axios.get('https://api.coinpaprika.com/v1/coins')\n  const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n  //Retrieve the prices\n  const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n  const promises = coinIds.map(id => axios.get(tickerUrl + id));\n  const coinData = await Promise.all(promises);\n  const coinPriceData = coinData.map(function(response) {\n    const coin = response.data;\n    return {\n      key: coin.id,\n      name: coin.name,\n      ticker: coin.symbol,\n      balance: 0,\n      price: coin.quotes['USD'].price,\n    }\n  });\n  setCoinData(coinPriceData);\n}\n\n  useEffect(function() {\n    if (coinData.length === 0){\n      componentDidMount();\n    }\n  });\n\n  const handleBrrrr = () => {\n    setBalance (oldBalance => oldBalance +1200);\n  }\n\n  const handleBalanceVisibiltyChange = () => {\n    setShowBalance (oldValue => !oldValue)\n  };\n\n  const handleTransaction =(isBuy, valueChangeId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map( function(values){\n      let newValues = {...values};\n      if (valueChangeId === values.key) {\n        newValues.balance += balanceChange;\n        setBalance(oldBalance => oldBalance - balanceChange * newValues.price );\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = response.data.quotes.USD.price;\n    const newCoinData = coinData.map(function(values) {\n      let newValues = {...values};\n      if (valueChangeId === values.key) {\n//        const randomPercentage = 0.995 + Math.random() * 0.01;\n//        newValues.price *= randomPercentage;\n          newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    // console.log(coin);\n    setCoinData(newCoinData);\n    \n  }\n\n  return (\n    <Div>\n      <ExchangeHeader />\n      <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleBrrrr={handleBrrrr}\n        handleBalanceVisibiltyChange={handleBalanceVisibiltyChange}/>\n      <CoinList \n        coinData={coinData} \n        showBalance={showBalance}\n        handleTransaction={handleTransaction}\n        handleRefreh={handleRefresh}/>\n    </Div>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}